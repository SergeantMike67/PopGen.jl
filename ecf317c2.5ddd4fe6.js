(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{159:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return b}));var a=n(2),r=n(6),i=(n(0),n(165)),o={},l={id:"getting_started/io/genepop",title:"genepop",description:"Genepop format",source:"@site/docs/getting_started/io/genepop.md",permalink:"/PopGen.jl/docs/getting_started/io/genepop",editUrl:"https://github.com/pdimens/popgen.jl/edit/documentation/docs/getting_started/io/genepop.md"},p=[{value:"Import a genepop file as <code>PopData</code>",id:"import-a-genepop-file-as-popdata",children:[{value:"arguments",id:"arguments",children:[]},{value:"keyword Arguments",id:"keyword-arguments",children:[]}]},{value:"Format",id:"format",children:[]},{value:"Acknowledgements",id:"acknowledgements",children:[]}],c={rightToc:p};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"genepop-format"},"Genepop format"),Object(i.b)("h2",{id:"import-a-genepop-file-as-popdata"},"Import a genepop file as ",Object(i.b)("inlineCode",{parentName:"h2"},"PopData")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-julia"}),'genepop(infile; kwargs...)\n\n# Example\njulia> b = genepop("/data/wasp_hive.gen", digits = 3, popsep = "POP")\n')),Object(i.b)("p",null,"::: warning Windows users\nMake sure to change your backslashes ",Object(i.b)("inlineCode",{parentName:"p"},"\\")," to forward slashes ",Object(i.b)("inlineCode",{parentName:"p"},"/"),"\n:::"),Object(i.b)("h3",{id:"arguments"},"arguments"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"infile::String")," : path to genepop file, in quotes")),Object(i.b)("h3",{id:"keyword-arguments"},"keyword Arguments"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"digits::Integer"),": number of digits denoting each allele (default: ",Object(i.b)("inlineCode",{parentName:"li"},"3"),")"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"popsep::String")," : word that separates populations in ",Object(i.b)("inlineCode",{parentName:"li"},"infile"),' (default: "POP")'),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"diploid::Bool"),"  : whether samples are diploid for parsing optimizations (default: ",Object(i.b)("inlineCode",{parentName:"li"},"true"),")"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"silent::Bool"),"   : whether to print file information during import (default: ",Object(i.b)("inlineCode",{parentName:"li"},"true"),")")),Object(i.b)("p",null,"::: tip population names\nBy default, the file reader will assign numbers as population ID's (as Strings) in order of appearance in the genepop file. Use the ",Object(i.b)("inlineCode",{parentName:"p"},"populations!")," function to rename these with your own population ID's.\n:::"),Object(i.b)("h2",{id:"format"},"Format"),Object(i.b)("p",null,"Files must follow standard Genepop formatting:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"First line is a comment (and skipped)"),Object(i.b)("li",{parentName:"ul"},"Loci are listed after first line as one-per-line without commas or in single comma-separated row"),Object(i.b)("li",{parentName:"ul"},"A line with a particular keyword (default ",Object(i.b)("inlineCode",{parentName:"li"},"POP"),") must delimit populations"),Object(i.b)("li",{parentName:"ul"},"Sample name is immediately followed by a ",Object(i.b)("em",{parentName:"li"},"comma")),Object(i.b)("li",{parentName:"ul"},"File is ",Object(i.b)("em",{parentName:"li"},"tab or space delimted")," (but not both!)")),Object(i.b)("p",null,":::: tabs card stretch\n::: tab genepop w/loci stacked vertically"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"Wasp populations in New York\nLocus1\nLocus2\nLocus3\nPOP\nOneida_01,  250230  564568  110100\nOneida_02,  252238  568558  100120\nOneida_03,  254230  564558  090100\nPOP\nNewcomb_01, 254230  564558  080100\nNewcomb_02, 000230  564558  090080\nNewcomb_03, 254230  000000  090100\nNewcomb_04, 254230  564000  090120\n")),Object(i.b)("p",null,":::\n::: tab genepop w/loci stacked horizontally"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"Wasp populations in New York\nLocus1,Locus2,Locus3\nPOP\nOneida_01,  250230  564568  110100\nOneida_02,  252238  568558  100120\nOneida_03,  254230  564558  090100\nPOP\nNewcomb_01, 254230  564558  080100\nNewcomb_02, 000230  564558  090080\nNewcomb_03, 254230  000000  090100\nNewcomb_04, 254230  564000  090120\n")),Object(i.b)("p",null,":::\n::::"),Object(i.b)("h2",{id:"acknowledgements"},"Acknowledgements"),Object(i.b)("p",null,"The original implementations of this parser were written using only Base Julia, and while the speed was fantastic, the memory footprint involved seemed unusually high (~650mb RAM to parse ",Object(i.b)("inlineCode",{parentName:"p"},"gulfsharks"),", which is only 3.2mb in size). However, thanks to  ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/JuliaData/CSV.jl"}),"CSV.jl"),", which does much of the heavy lifting, we preserved the speed and reduce the memory footprint quite a bit!"))}b.isMDXComponent=!0},165:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),b=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=b(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),s=b(n),m=a,d=s["".concat(o,".").concat(m)]||s[m]||u[m]||i;return n?r.a.createElement(d,l(l({ref:t},c),{},{components:n})):r.a.createElement(d,l({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);