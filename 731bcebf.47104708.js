(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{124:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return s}));var a=n(2),i=n(6),r=(n(0),n(150)),o={id:"hardyweinberg",title:"Hardy-Weinberg Equilibrium",sidebar_label:"Hardy-Weinberg Equilibrium"},l={id:"analyses/hardyweinberg",title:"Hardy-Weinberg Equilibrium",description:"Testing for Hardy-Weinberg Equilibrium (often abbreviated HWE) is a fairly common practice in population genetics. In a two-allele system, the HWE equation is defined as: p^2 + 2pq + q^2 = 1",source:"@site/docs/analyses/hardyweinberg.md",permalink:"/PopGen.jl/docs/analyses/hardyweinberg",editUrl:"https://github.com/pdimens/popgen.jl/edit/documentation/docs/analyses/hardyweinberg.md",sidebar_label:"Hardy-Weinberg Equilibrium",sidebar:"docs",previous:{title:"Viewing and sorting",permalink:"/PopGen.jl/docs/tutorials/viewsort"},next:{title:"Relatedness (Kinship)",permalink:"/PopGen.jl/docs/analyses/relatedness"}},c=[{value:"Chi-Squared Test",id:"chi-squared-test",children:[{value:"arguments",id:"arguments",children:[]},{value:"<code>correction</code> methods",id:"correction-methods",children:[]},{value:"example",id:"example",children:[]}]},{value:"Interpreting the results",id:"interpreting-the-results",children:[{value:"Visualizing the results",id:"visualizing-the-results",children:[]}]}],b={rightToc:c};function s(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Testing for Hardy-Weinberg Equilibrium (often abbreviated ",Object(r.b)("em",{parentName:"p"},"HWE"),") is a fairly common practice in population genetics. In a two-allele system, the HWE equation is defined as: p^2 + 2pq + q^2 = 1\nwhere $p$ is the frequency of the first allele and $q$ is the frequency of the second allele. The formula describes the frequency of all possible genotypes where"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:"center"}),"HWE variable"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:"center"}),"Genotype"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:"center"}),"State"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"p^2"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),'"pp"'),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"homozygous")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"q^2"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),'"qq"'),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"homozygous")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"2pq"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),'"pq"'),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"heterozygous")))),Object(r.b)("p",null,"Testing for deviation from HWE is usually done with a Chi-Squared test, where one compares the observed genotype frequencies to the expected genotype frequencies given the observed allele frequencies at a locus. Specifically the equation is\n$$\\sum{\\frac{(observed - expected)^2}{expected}}$$\nwhere $observed$ is the observed genotype frequency and $expected$ is the expected genotype frequency for a locus. To generate our test statistic, we calculate the degrees of freedom:\n$$degrees\\ of\\ freedom = n",Object(r.b)("em",{parentName:"p"},"{expected\\ genotypes} - n"),"{observed\\ alleles}$$\nand use this as the parameter for our Chi Squared distribution, followed by a cumulative density function using this Chi Squared distribution and our Chi-Squared value calculated above."),Object(r.b)("h2",{id:"chi-squared-test"},"Chi-Squared Test"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-julia"}),'hwe_test(x::PopObj, by::String = "locus", correction::String = "none")\n')),Object(r.b)("p",null,"Calculate chi-squared test of HWE for each locus and returns observed and expected heterozygosity with chi-squared, degrees of freedom and p-values for each locus. Use ",Object(r.b)("inlineCode",{parentName:"p"},'by = "population"')," to perform this separately for each population (default: ",Object(r.b)("inlineCode",{parentName:"p"},'"locus"'),"). Use ",Object(r.b)("inlineCode",{parentName:"p"},"correction =")," to specify a P-value correction method for multiple testing (recommended). For convenience, the correction method is appended to the name of the column, so you will always know how those P-values were adjusted."),Object(r.b)("h3",{id:"arguments"},"arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"x")," : the input ",Object(r.b)("inlineCode",{parentName:"li"},"PopObj")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"by_pop =")," : ",Object(r.b)("inlineCode",{parentName:"li"},"false")," (default) or ",Object(r.b)("inlineCode",{parentName:"li"},"true")," for hwe-by-population"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"correction ="),'  : a string specifying a P-value adjustment type (default: "none")')),Object(r.b)("h3",{id:"correction-methods"},Object(r.b)("inlineCode",{parentName:"h3"},"correction")," methods"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},'"bonferroni"')," : Bonferroni adjustment"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},'"holm"')," : Holm adjustment"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},'"hochberg"')," : Hochberg adjustment"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},'"bh"')," : Benjamini-Hochberg adjustment"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},'"by"')," : Benjamini-Yekutieli adjustment"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},'"bl"'),"  : Benjamini-Liu adjustment"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},'"hommel"')," : Hommel adjustment"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},'"sidak"')," : \u0160id\xe1k adjustment"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},'"forward stop"')," or ",Object(r.b)("inlineCode",{parentName:"li"},'"fs"')," : Forward-Stop adjustment"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},'"bc"')," : Barber-Cande\u0300s adjustment")),Object(r.b)("p",null,":thinking: For more information on multiple testing adjustments, see ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://juliangehring.github.io/MultipleTesting.jl/stable/"}),"MultipleTesting.jl")),Object(r.b)("h3",{id:"example"},"example"),Object(r.b)("p",null,":::: tabs card stretch\n::: tab HWE Chi-Squared"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"julia> hwe_test(gulfsharks())\n2213\xd74 DataFrame\n\u2502 Row  \u2502 locus        \u2502 chisq     \u2502 df    \u2502 P        \u2502\n\u2502      \u2502 Categorical\u2026 \u2502 Float64   \u2502 Int64 \u2502 Float64? \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1    \u2502 contig_35208 \u2502 0.690979  \u2502 3     \u2502 0.875324 \u2502\n\u2502 2    \u2502 contig_23109 \u2502 1.71251   \u2502 1     \u2502 0.19066  \u2502\n\u2502 3    \u2502 contig_4493  \u2502 2.0785    \u2502 1     \u2502 0.149387 \u2502\n\u2502 4    \u2502 contig_10742 \u2502 0.249703  \u2502 1     \u2502 0.617284 \u2502\n\u2502 5    \u2502 contig_14898 \u2502 2.10859   \u2502 1     \u2502 0.146474 \u2502\n\u2502 6    \u2502 contig_8483  \u2502 0.019229  \u2502 1     \u2502 0.889712 \u2502\n\u22ee\n\u2502 2207 \u2502 contig_18959 \u2502 0.968083  \u2502 1     \u2502 0.325159 \u2502\n\u2502 2208 \u2502 contig_43517 \u2502 0.655517  \u2502 1     \u2502 0.418147 \u2502\n\u2502 2209 \u2502 contig_27356 \u2502 1.71412   \u2502 1     \u2502 0.190451 \u2502\n\u2502 2210 \u2502 contig_475   \u2502 0.0754715 \u2502 1     \u2502 0.783531 \u2502\n\u2502 2211 \u2502 contig_19384 \u2502 2.10124   \u2502 1     \u2502 0.147179 \u2502\n\u2502 2212 \u2502 contig_22368 \u2502 0.473923  \u2502 1     \u2502 0.491188 \u2502\n\u2502 2213 \u2502 contig_2784  \u2502 0.0452162 \u2502 1     \u2502 0.831607 \u2502\n")),Object(r.b)("p",null,":::\n::: tab HWE with P adjustment"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'julia> hwe_test(gulfsharks(), correction = "bh")\n2213\xd75 DataFrame\n\u2502 Row  \u2502 locus        \u2502 chisq     \u2502 df    \u2502 P        \u2502 P_bh     \u2502\n\u2502      \u2502 Categorical\u2026 \u2502 Float64   \u2502 Int64 \u2502 Float64? \u2502 Float64? \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1    \u2502 contig_35208 \u2502 0.690979  \u2502 3     \u2502 0.875324 \u2502 0.999911 \u2502\n\u2502 2    \u2502 contig_23109 \u2502 1.71251   \u2502 1     \u2502 0.19066  \u2502 0.999911 \u2502\n\u2502 3    \u2502 contig_4493  \u2502 2.0785    \u2502 1     \u2502 0.149387 \u2502 0.999911 \u2502\n\u2502 4    \u2502 contig_10742 \u2502 0.249703  \u2502 1     \u2502 0.617284 \u2502 0.999911 \u2502\n\u2502 5    \u2502 contig_14898 \u2502 2.10859   \u2502 1     \u2502 0.146474 \u2502 0.999911 \u2502\n\u2502 6    \u2502 contig_8483  \u2502 0.019229  \u2502 1     \u2502 0.889712 \u2502 0.999911 \u2502\n\u22ee\n\u2502 2207 \u2502 contig_18959 \u2502 0.968083  \u2502 1     \u2502 0.325159 \u2502 0.999911 \u2502\n\u2502 2208 \u2502 contig_43517 \u2502 0.655517  \u2502 1     \u2502 0.418147 \u2502 0.999911 \u2502\n\u2502 2209 \u2502 contig_27356 \u2502 1.71412   \u2502 1     \u2502 0.190451 \u2502 0.999911 \u2502\n\u2502 2210 \u2502 contig_475   \u2502 0.0754715 \u2502 1     \u2502 0.783531 \u2502 0.999911 \u2502\n\u2502 2211 \u2502 contig_19384 \u2502 2.10124   \u2502 1     \u2502 0.147179 \u2502 0.999911 \u2502\n\u2502 2212 \u2502 contig_22368 \u2502 0.473923  \u2502 1     \u2502 0.491188 \u2502 0.999911 \u2502\n\u2502 2213 \u2502 contig_2784  \u2502 0.0452162 \u2502 1     \u2502 0.831607 \u2502 0.999911 \u2502\n')),Object(r.b)("p",null,":::\n::: tab HWE by population"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'julia> hwe_test(gulfsharks(), by = "population")\n15491\xd75 DataFrame\n\u2502 Row   \u2502 locus        \u2502 population     \u2502 chisq       \u2502 df    \u2502 P        \u2502\n\u2502       \u2502 Categorical\u2026 \u2502 Categorical\u2026   \u2502 Float64     \u2502 Int64 \u2502 Float64? \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1     \u2502 contig_35208 \u2502 Cape Canaveral \u2502 1.01787     \u2502 1     \u2502 0.313025 \u2502\n\u2502 2     \u2502 contig_35208 \u2502 Georgia        \u2502 0.725926    \u2502 1     \u2502 0.394207 \u2502\n\u2502 3     \u2502 contig_35208 \u2502 South Carolina \u2502 0.571429    \u2502 1     \u2502 0.449692 \u2502\n\u2502 4     \u2502 contig_35208 \u2502 Florida Keys   \u2502 0.276208    \u2502 3     \u2502 0.964439 \u2502\n\u2502 5     \u2502 contig_35208 \u2502 Mideast Gulf   \u2502 0.598475    \u2502 1     \u2502 0.439161 \u2502\n\u2502 6     \u2502 contig_35208 \u2502 Northeast Gulf \u2502 0.519382    \u2502 3     \u2502 0.914613 \u2502\n\u22ee\n\u2502 15485 \u2502 contig_2784  \u2502 Cape Canaveral \u2502 2.9277e-11  \u2502 0     \u2502 missing  \u2502\n\u2502 15486 \u2502 contig_2784  \u2502 Georgia        \u2502 1.05242e-11 \u2502 0     \u2502 missing  \u2502\n\u2502 15487 \u2502 contig_2784  \u2502 South Carolina \u2502 1.94026e-11 \u2502 0     \u2502 missing  \u2502\n\u2502 15488 \u2502 contig_2784  \u2502 Florida Keys   \u2502 0.0374777   \u2502 1     \u2502 0.846496 \u2502\n\u2502 15489 \u2502 contig_2784  \u2502 Mideast Gulf   \u2502 0.0399408   \u2502 1     \u2502 0.841596 \u2502\n\u2502 15490 \u2502 contig_2784  \u2502 Northeast Gulf \u2502 1.47338e-11 \u2502 0     \u2502 missing  \u2502\n\u2502 15491 \u2502 contig_2784  \u2502 Southeast Gulf \u2502 0.0138787   \u2502 1     \u2502 0.90622  \u2502\n')),Object(r.b)("p",null,"When doing this test by population, you may notice some loci have ",Object(r.b)("inlineCode",{parentName:"p"},"missing")," P-values for certain populations, indicating that this locus is missing for that population. "),Object(r.b)("p",null,":::\n::::"),Object(r.b)("h2",{id:"interpreting-the-results"},"Interpreting the results"),Object(r.b)("p",null,"Since the results are in table form, you can easily process the table using ",Object(r.b)("inlineCode",{parentName:"p"},"JuliaDBMeta.jl")," or ",Object(r.b)("inlineCode",{parentName:"p"},"Query.jl")," to find loci above or below the alpha threshold you want. As an example, let's perform an HWE-test on the ",Object(r.b)("inlineCode",{parentName:"p"},"nancycats")," data without any P-value adjustments:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-julia"}),'julia> ncats_hwe = hwe_test(nancycats() , by = "population") ;\n')),Object(r.b)("p",null,"Now, we can use ",Object(r.b)("inlineCode",{parentName:"p"},"DataFramesMeta")," to easily filter this table and leave only what we're interested in:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-julia"}),"using DataFramesMeta\n\njulia> @where(ncats_hwe, :P .!== missing, :P .<= 0.05)\n")),Object(r.b)("p",null,"With this command, we invoke the ",Object(r.b)("inlineCode",{parentName:"p"},"@where")," filtering macro, then specify our ",Object(r.b)("inlineCode",{parentName:"p"},"ncats_hwe")," table, the ",Object(r.b)("inlineCode",{parentName:"p"},":P")," column of P-values, and then specify two filtering parameters: 1. the P-values are not ",Object(r.b)("inlineCode",{parentName:"p"},"missing"),", and 2. the P-values are less than or equal to 0.05. Doing this results in a table that now only includes non-missing P-values of 0.05 or lower:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"46\xd75 DataFrame\n\u2502 Row \u2502 locus \u2502 population \u2502 chisq   \u2502 df    \u2502 P           \u2502\n\u2502     \u2502 Cat\u2026  \u2502 Cat\u2026       \u2502 Float64 \u2502 Int64 \u2502 Float64?    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 fca8  \u2502 2          \u2502 29.8624 \u2502 15    \u2502 0.0124275   \u2502\n\u2502 2   \u2502 fca8  \u2502 3          \u2502 39.72   \u2502 21    \u2502 0.00804172  \u2502\n\u2502 3   \u2502 fca8  \u2502 4          \u2502 64.3039 \u2502 45    \u2502 0.0308567   \u2502\n\u2502 4   \u2502 fca8  \u2502 6          \u2502 34.0525 \u2502 21    \u2502 0.0357734   \u2502\n\u2502 5   \u2502 fca8  \u2502 7          \u2502 37.6531 \u2502 15    \u2502 0.00101511  \u2502\n\u2502 6   \u2502 fca23 \u2502 1          \u2502 26.0494 \u2502 10    \u2502 0.00367434  \u2502\n\u22ee\n\u2502 40  \u2502 fca96 \u2502 14         \u2502 58.0854 \u2502 36    \u2502 0.0112879   \u2502\n\u2502 41  \u2502 fca96 \u2502 15         \u2502 26.51   \u2502 15    \u2502 0.0329918   \u2502\n\u2502 42  \u2502 fca96 \u2502 2          \u2502 92.0716 \u2502 15    \u2502 4.06675e-13 \u2502\n\u2502 43  \u2502 fca37 \u2502 1          \u2502 10.1562 \u2502 3     \u2502 0.0172836   \u2502\n\u2502 44  \u2502 fca37 \u2502 3          \u2502 13.4815 \u2502 6     \u2502 0.0359962   \u2502\n\u2502 45  \u2502 fca37 \u2502 5          \u2502 30.0206 \u2502 6     \u2502 3.89561e-5  \u2502\n\u2502 46  \u2502 fca37 \u2502 8          \u2502 33.5111 \u2502 21    \u2502 0.0408481   \u2502\n")),Object(r.b)("h3",{id:"visualizing-the-results"},"Visualizing the results"),Object(r.b)("p",null,"While not strictly necessary, it might sometimes make sense to generate of heatmap of the results for easier visualization. This is feasible for the ",Object(r.b)("inlineCode",{parentName:"p"},"nancycats")," data, but when loci are in the hundreds or thousands, this method quickly becomes counterproductive. In any case, here is a simple example of the HWE results for ",Object(r.b)("inlineCode",{parentName:"p"},"nancycats")," plotted as a heatmap using ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/queryverse/VegaLite.jl"}),"VegaLite.jl"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-julia"}),'using VegaLite\n\njulia> ncats_hwe = hwe_test(nancycats() , by = "population", correction = "bonferroni");\n\njulia> ncats |> @vlplot(:rect, :locus, :population, color=:P_bonferroni)\n')),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"/PopGen.jl/img/hwe_test.png",alt:"hwe_test"}))))}s.isMDXComponent=!0},150:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var b=i.a.createContext({}),s=function(e){var t=i.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return i.a.createElement(b.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),u=s(n),d=a,m=u["".concat(o,".").concat(d)]||u[d]||p[d]||r;return n?i.a.createElement(m,l(l({ref:t},b),{},{components:n})):i.a.createElement(m,l({ref:t},b))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var b=2;b<r;b++)o[b]=n[b];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);